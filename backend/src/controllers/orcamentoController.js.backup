const database = require('../config/database').pool;

class OrcamentoController {
  // ============================================
  // üìã LISTAR TODOS OS OR√áAMENTOS
  // ============================================
  async listarTodos(req, res) {
    try {
      console.log('üìã Listando or√ßamentos...');
      console.log('üåê PostgreSQL conectado - Database:', database.options?.database || 'sistema_os');
      
      const query = `
        SELECT 
          o.id,
          o.numero,
          o.cliente_id,
          c.nome as cliente_nome,
          c.cpf as cliente_cpf,
          c.email as cliente_email,
          c.telefone as cliente_telefone,
          o.data_orcamento,
          o.data_validade,
          o.valor_total,
          o.desconto,
          o.valor_final,
          o.status,
          o.observacoes,
          o.created_at,
          o.updated_at
        FROM orcamentos o
        LEFT JOIN clientes c ON o.cliente_id = c.id
        ORDER BY o.created_at DESC
        LIMIT 1000
      `;
      
      const result = await database.query(query);
      
      console.log('‚úÖ Or√ßamentos encontrados:', result.rows.length);
      
      // Resposta compat√≠vel com frontend
      res.json({
        data: result.rows,
        total: result.rows.length,
        success: true
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao listar or√ßamentos:', error);
      res.status(500).json({ 
        erro: 'Erro ao carregar or√ßamentos',
        mensagem: error.message,
        success: false
      });
    }
  }

  // ============================================
  // üìã LISTAR COM PAGINA√á√ÉO
  // ============================================
  async listarComPaginacao(req, res) {
    try {
      const { page = 1, limit = 10, search = '' } = req.query;
      console.log(`üîç Listando or√ßamentos - P√°gina: ${page} Limite: ${limit} Busca: ${search}`);
      
      const offset = (parseInt(page) - 1) * parseInt(limit);
      
      let whereClause = '';
      let params = [];
      let paramCount = 0;
      
      if (search && search.trim()) {
        paramCount++;
        whereClause = `
          WHERE (
            o.numero ILIKE $${paramCount} OR 
            c.nome ILIKE $${paramCount} OR 
            c.cpf ILIKE $${paramCount} OR
            CAST(o.valor_total AS TEXT) ILIKE $${paramCount}
          )
        `;
        params.push(`%${search.trim()}%`);
      }
      
      // Query para contar total
      const countQuery = `
        SELECT COUNT(*) as total
        FROM orcamentos o
        LEFT JOIN clientes c ON o.cliente_id = c.id
        ${whereClause}
      `;
      
      // Query para buscar dados
      const dataQuery = `
        SELECT 
          o.id,
          o.numero,
          o.cliente_id,
          c.nome as cliente_nome,
          c.cpf as cliente_cpf,
          c.email as cliente_email,
          c.telefone as cliente_telefone,
          o.data_orcamento,
          o.data_validade,
          o.valor_total,
          o.desconto,
          o.valor_final,
          o.status,
          o.observacoes,
          o.created_at,
          o.updated_at
        FROM orcamentos o
        LEFT JOIN clientes c ON o.cliente_id = c.id
        ${whereClause}
        ORDER BY o.created_at DESC
        LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}
      `;
      
      params.push(parseInt(limit), offset);
      
      const [countResult, dataResult] = await Promise.all([
        database.query(countQuery, whereClause ? params.slice(0, 1) : []),
        database.query(dataQuery, params)
      ]);
      
      const total = parseInt(countResult.rows[0].total);
      const totalPages = Math.ceil(total / parseInt(limit));
      
      console.log('‚úÖ Or√ßamentos encontrados:', dataResult.rows.length, 'de', total, 'total');
      
      // Estrutura compat√≠vel com frontend
      const response = {
        data: dataResult.rows,
        pagination: {
          page: parseInt(page),
          limit: parseInt(limit),
          total: total,
          totalPages: totalPages,
          hasNext: parseInt(page) < totalPages,
          hasPrev: parseInt(page) > 1
        },
        success: true
      };
      
      res.json(response);
      
    } catch (error) {
      console.error('‚ùå Erro ao listar or√ßamentos com pagina√ß√£o:', error);
      res.status(500).json({ 
        erro: 'Erro ao carregar or√ßamentos',
        mensagem: error.message,
        success: false
      });
    }
  }

  // ============================================
  // ‚ûï CRIAR NOVO OR√áAMENTO
  // ============================================
  async criar(req, res) {
    try {
      const dadosOrcamento = req.body;
      console.log('‚ûï Criando or√ßamento para cliente ID:', dadosOrcamento.cliente_id);
      
      // Valida√ß√µes b√°sicas
      if (!dadosOrcamento.cliente_id) {
        return res.status(400).json({ 
          erro: 'Cliente √© obrigat√≥rio',
          mensagem: '√â necess√°rio informar o ID do cliente'
        });
      }
      
      // Verificar se cliente existe
      const clienteExiste = await database.query(
        'SELECT id, nome FROM clientes WHERE id = $1',
        [dadosOrcamento.cliente_id]
      );
      
      if (clienteExiste.rows.length === 0) {
        return res.status(400).json({
          erro: 'Cliente n√£o encontrado',
          mensagem: 'Cliente informado n√£o existe no sistema'
        });
      }
      
      // Gerar n√∫mero do or√ßamento se n√£o informado
      let numero = dadosOrcamento.numero;
      if (!numero) {
        const ultimoOrcamento = await database.query(
          'SELECT numero FROM orcamentos ORDER BY id DESC LIMIT 1'
        );
        
        if (ultimoOrcamento.rows.length > 0) {
          const ultimoNumero = parseInt(ultimoOrcamento.rows[0].numero) || 0;
          numero = String(ultimoNumero + 1).padStart(6, '0');
        } else {
          numero = '000001';
        }
      }
      
      // Inserir or√ßamento
      const query = `
        INSERT INTO orcamentos (
          numero, cliente_id, data_orcamento, data_validade,
          valor_total, desconto, valor_final, status, observacoes,
          created_at, updated_at
        )
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
        RETURNING *
      `;
      
      const valores = [
        numero,
        dadosOrcamento.cliente_id,
        dadosOrcamento.data_orcamento || new Date(),
        dadosOrcamento.data_validade,
        dadosOrcamento.valor_total || 0,
        dadosOrcamento.desconto || 0,
        dadosOrcamento.valor_final || 0,
        dadosOrcamento.status || 'rascunho',
        dadosOrcamento.observacoes || ''
      ];
      
      const result = await database.query(query, valores);
      
      console.log('‚úÖ Or√ßamento criado:', numero, 'para cliente:', clienteExiste.rows[0].nome);
      
      res.status(201).json({
        sucesso: true,
        data: result.rows[0],
        mensagem: `Or√ßamento ${numero} criado com sucesso`
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao criar or√ßamento:', error);
      res.status(500).json({ 
        erro: 'Erro ao criar or√ßamento',
        mensagem: error.message,
        success: false
      });
    }
  }

  // ============================================
  // üîÑ ATUALIZAR OR√áAMENTO
  // ============================================
  async atualizar(req, res) {
    try {
      const { id } = req.params;
      const dadosOrcamento = req.body;
      console.log('üîÑ Atualizando or√ßamento ID:', id);
      
      if (!id || isNaN(id)) {
        return res.status(400).json({ erro: 'ID inv√°lido' });
      }
      
      // Verificar se or√ßamento existe
      const orcamentoExistente = await database.query(
        'SELECT * FROM orcamentos WHERE id = $1',
        [id]
      );
      
      if (orcamentoExistente.rows.length === 0) {
        return res.status(404).json({ erro: 'Or√ßamento n√£o encontrado' });
      }
      
      // Se cliente_id foi alterado, verificar se existe
      if (dadosOrcamento.cliente_id) {
        const clienteExiste = await database.query(
          'SELECT id, nome FROM clientes WHERE id = $1',
          [dadosOrcamento.cliente_id]
        );
        
        if (clienteExiste.rows.length === 0) {
          return res.status(400).json({
            erro: 'Cliente n√£o encontrado',
            mensagem: 'Cliente informado n√£o existe no sistema'
          });
        }
      }
      
      // Preparar query de atualiza√ß√£o din√¢mica
      let query = `UPDATE orcamentos SET updated_at = CURRENT_TIMESTAMP`;
      let valores = [];
      let paramCount = 0;
      
      const camposPermitidos = [
        'numero', 'cliente_id', 'data_orcamento', 'data_validade',
        'valor_total', 'desconto', 'valor_final', 'status', 'observacoes'
      ];
      
      camposPermitidos.forEach(campo => {
        if (dadosOrcamento[campo] !== undefined) {
          paramCount++;
          query += `, ${campo} = $${paramCount}`;
          valores.push(dadosOrcamento[campo]);
        }
      });
      
      query += ` WHERE id = $${paramCount + 1} RETURNING *`;
      valores.push(id);
      
      const result = await database.query(query, valores);
      
      console.log('‚úÖ Or√ßamento atualizado:', result.rows[0].numero);
      
      res.json({
        sucesso: true,
        data: result.rows[0],
        mensagem: `Or√ßamento ${result.rows[0].numero} atualizado com sucesso`
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao atualizar or√ßamento:', error);
      res.status(500).json({ 
        erro: 'Erro ao atualizar or√ßamento',
        mensagem: error.message,
        success: false
      });
    }
  }

  // ============================================
  // üóëÔ∏è DELETAR OR√áAMENTO
  // ============================================
  async deletar(req, res) {
    try {
      const { id } = req.params;
      console.log('üóëÔ∏è Deletando or√ßamento ID:', id);
      
      if (!id || isNaN(id)) {
        return res.status(400).json({ erro: 'ID inv√°lido' });
      }
      
      // Verificar se or√ßamento existe
      const orcamentoExistente = await database.query(
        'SELECT numero FROM orcamentos WHERE id = $1',
        [id]
      );
      
      if (orcamentoExistente.rows.length === 0) {
        return res.status(404).json({ erro: 'Or√ßamento n√£o encontrado' });
      }
      
      const numeroOrcamento = orcamentoExistente.rows[0].numero;
      
      // Deletar or√ßamento
      await database.query('DELETE FROM orcamentos WHERE id = $1', [id]);
      
      console.log('‚úÖ Or√ßamento deletado:', numeroOrcamento);
      
      res.json({
        sucesso: true,
        mensagem: `Or√ßamento ${numeroOrcamento} deletado com sucesso`
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao deletar or√ßamento:', error);
      res.status(500).json({ 
        erro: 'Erro ao deletar or√ßamento',
        mensagem: error.message,
        success: false
      });
    }
  }

  // ============================================
  // üîç BUSCAR POR ID
  // ============================================
  async buscarPorId(req, res) {
    try {
      const { id } = req.params;
      console.log('üîç Buscando or√ßamento ID:', id);
      
      if (!id || isNaN(id)) {
        return res.status(400).json({ erro: 'ID inv√°lido' });
      }
      
      const query = `
        SELECT 
          o.id,
          o.numero,
          o.cliente_id,
          c.nome as cliente_nome,
          c.cpf as cliente_cpf,
          c.email as cliente_email,
          c.telefone as cliente_telefone,
          o.data_orcamento,
          o.data_validade,
          o.valor_total,
          o.desconto,
          o.valor_final,
          o.status,
          o.observacoes,
          o.created_at,
          o.updated_at
        FROM orcamentos o
        LEFT JOIN clientes c ON o.cliente_id = c.id
        WHERE o.id = $1
      `;
      
      const result = await database.query(query, [id]);
      
      if (result.rows.length === 0) {
        return res.status(404).json({ erro: 'Or√ßamento n√£o encontrado' });
      }
      
      console.log('‚úÖ Or√ßamento encontrado:', result.rows[0].numero);
      
      res.json({
        data: result.rows[0],
        success: true
      });
      
    } catch (error) {
      console.error('‚ùå Erro ao buscar or√ßamento:', error);
      res.status(500).json({ 
        erro: 'Erro ao buscar or√ßamento',
        mensagem: error.message,
        success: false
      });
    }
  }

  // ============================================
  // üìä ESTAT√çSTICAS
  // ============================================
  async obterEstatisticas(req, res) {
    try {
      console.log('üìä Obtendo estat√≠sticas de or√ßamentos...');
      
      const estatisticas = await database.query(`
        SELECT 
          COUNT(*) as total,
          COUNT(*) FILTER (WHERE status = 'rascunho') as rascunhos,
          COUNT(*) FILTER (WHERE status = 'pendente') as pendentes,
          COUNT(*) FILTER (WHERE status = 'aprovado') as aprovados,
          COUNT(*) FILTER (WHERE status = 'rejeitado') as rejeitados,
          SUM(valor_final) as valor_total,
          AVG(valor_final) as valor_medio,
          COUNT(*) FILTER (WHERE created_at >= CURRENT_DATE - INTERVAL '30 days') as novos_ultimo_mes
        FROM orcamentos
      `);
      
      const dados = {
        total: parseInt(estatisticas.rows[0].total) || 0,
        rascunhos: parseInt(estatisticas.rows[0].rascunhos) || 0,
        pendentes: parseInt(estatisticas.rows[0].pendentes) || 0,
        aprovados: parseInt(estatisticas.rows[0].aprovados) || 0,
        rejeitados: parseInt(estatisticas.rows[0].rejeitados) || 0,
        valor_total: parseFloat(estatisticas.rows[0].valor_total) || 0,
        valor_medio: parseFloat(estatisticas.rows[0].valor_medio) || 0,
        novos_ultimo_mes: parseInt(estatisticas.rows[0].novos_ultimo_mes) || 0
      };
      
      console.log('‚úÖ Estat√≠sticas obtidas:', dados);
      res.json(dados);
      
    } catch (error) {
      console.error('‚ùå Erro ao obter estat√≠sticas:', error);
      res.status(500).json({ 
        erro: 'Erro ao obter estat√≠sticas',
        mensagem: error.message,
        success: false
      });
    }
  }

  // ============================================
  // üß™ TESTE DE CONEX√ÉO
  // ============================================
  async teste(req, res) {
    try {
      console.log('üß™ Testando conex√£o or√ßamentos...');
      
      const result = await database.query('SELECT COUNT(*) as total FROM orcamentos');
      const totalOrcamentos = result.rows[0].total;
      
      console.log('‚úÖ Teste de conex√£o bem-sucedido - Total or√ßamentos:', totalOrcamentos);
      
      res.json({
        status: 'OK',
        message: 'Controlador de or√ßamentos funcionando perfeitamente',
        totalOrcamentos: parseInt(totalOrcamentos),
        database: database.options?.database || 'conectado',
        timestamp: new Date().toISOString(),
        version: '2.0 - Usando apenas cliente_id',
        estrutura_corrigida: true
      });
      
    } catch (error) {
      console.error('‚ùå Erro no teste de conex√£o:', error);
      res.status(500).json({ 
        status: 'ERROR',
        erro: 'Erro no teste de conex√£o',
        mensagem: error.message,
        timestamp: new Date().toISOString()
      });
    }
  }
}

module.exports = new OrcamentoController();