import { login, registrar, getPerfil, logout, isAuthenticated, getCurrentUser } from './api';

// ============================================
// üîê SERVI√áO DE AUTENTICA√á√ÉO H√çBRIDO PERFEITO
// ============================================

const authService = {
  
  // ============================================
  // üö™ LOGIN (Baseado no seu c√≥digo)
  // ============================================
  login: async (dados) => {
    try {
      console.log('\nüîê =================================');
      console.log('üö™ INICIANDO LOGIN');
      console.log('=================================');
      console.log('üìß Email:', dados.email);
      console.log('üîí Senha:', '*'.repeat(dados.senha?.length || 0));
      console.log('üåê Plataforma:', window.location.hostname.includes('vercel.app') ? 'VERCEL' : window.location.hostname.includes('onrender.com') ? 'RENDER' : 'LOCAL');
      
      // Valida√ß√£o b√°sica (sua l√≥gica mantida)
      if (!dados.email || !dados.senha) {
        throw new Error('Email e senha s√£o obrigat√≥rios');
      }
      
      // Usar fun√ß√£o login da api.js (com rotas din√¢micas)
      const response = await login(dados.email, dados.senha);
      
      // Verificar se recebeu token (sua valida√ß√£o mantida)
      if (!response.token) {
        throw new Error('Token n√£o recebido do servidor');
      }
      
      // Compatibilidade com ambos os formatos de resposta
      const usuario = response.usuario || response.user;
      
      console.log('‚úÖ LOGIN SUCCESSFUL!');
      console.log('üë§ Usu√°rio:', usuario.nome);
      console.log('üé´ Tipo:', usuario.tipo);
      console.log('üÜî ID:', usuario.id);
      console.log('=================================\n');
      
      return response;
      
    } catch (error) {
      console.log('\n‚ùå =================================');
      console.log('üí• ERRO NO LOGIN');
      console.log('=================================');
      
      if (error.response) {
        console.log('üìä Status:', error.response.status);
        console.log('üìù Mensagem:', error.response.data?.message || 'Erro desconhecido');
        
        // Suas mensagens espec√≠ficas mantidas
        switch (error.response.status) {
          case 401:
            console.log('üö´ Credenciais inv√°lidas');
            break;
          case 404:
            console.log('üîç Usu√°rio n√£o encontrado ou rota n√£o existe');
            break;
          case 500:
            console.log('üîß Erro interno do servidor');
            break;
        }
      } else if (error.request) {
        console.log('üì° Erro de conex√£o - verifique se o backend est√° rodando');
      } else {
        console.log('‚öôÔ∏è Erro de configura√ß√£o:', error.message);
      }
      
      console.log('=================================\n');
      throw error;
    }
  },

  // ============================================
  // üìù REGISTRO (Baseado no seu c√≥digo)
  // ============================================
  register: async (dados) => {
    try {
      console.log('\nüìù =================================');
      console.log('‚ú® INICIANDO REGISTRO');
      console.log('=================================');
      console.log('üìß Email:', dados.email);
      console.log('üë§ Nome:', dados.nome);
      console.log('üè¢ Tipo:', dados.tipo);
      console.log('üåê Plataforma:', window.location.hostname.includes('vercel.app') ? 'VERCEL' : window.location.hostname.includes('onrender.com') ? 'RENDER' : 'LOCAL');
      
      // Suas valida√ß√µes b√°sicas mantidas
      const requiredFields = ['nome', 'email', 'senha'];
      const missingFields = requiredFields.filter(field => !dados[field]);
      
      if (missingFields.length > 0) {
        throw new Error(`Campos obrigat√≥rios faltando: ${missingFields.join(', ')}`);
      }
      
      // Usar fun√ß√£o registrar da api.js (com rotas din√¢micas)
      const response = await registrar(dados.nome, dados.email, dados.senha);
      
      console.log('‚úÖ REGISTRO SUCCESSFUL!');
      console.log('üéâ Usu√°rio criado:', response.usuario?.nome || response.user?.nome);
      console.log('=================================\n');
      
      return response;
      
    } catch (error) {
      console.log('\n‚ùå =================================');
      console.log('üí• ERRO NO REGISTRO');
      console.log('=================================');
      
      if (error.response?.status === 409) {
        console.log('üë• Usu√°rio j√° existe');
      } else if (error.response?.status === 400) {
        console.log('üìù Dados inv√°lidos');
      }
      
      console.log('üìù Erro:', error.response?.data?.message || error.message);
      console.log('=================================\n');
      
      throw error;
    }
  },

  // ============================================
  // üö™ LOGOUT (Seu c√≥digo mantido)
  // ============================================
  logout: () => {
    console.log('\nüö™ =================================');
    console.log('üëã FAZENDO LOGOUT');
    console.log('=================================');
    
    try {
      // Usar fun√ß√£o logout da api.js
      logout();
      
      console.log('üßπ Dados locais limpos');
      console.log('üîÑ Redirecionando para login...');
      console.log('=================================\n');
      
      // Redirecionar para login (sua l√≥gica mantida)
      window.location.href = '/login';
      
    } catch (error) {
      console.error('‚ùå Erro durante logout:', error);
      // Mesmo com erro, tenta redirecionar
      window.location.href = '/login';
    }
  },

  // ============================================
  // üîç VERIFICA√á√ïES DE ESTADO (Suas fun√ß√µes mantidas)
  // ============================================
  
  // Verificar se est√° autenticado
  isAuthenticated: () => {
    try {
      const token = localStorage.getItem('token');
      const user = localStorage.getItem('user');
      
      // Suas verifica√ß√µes b√°sicas mantidas
      if (!token || !user) {
        return false;
      }
      
      // Verificar se o token n√£o expirou (sua l√≥gica mantida)
      if (authService.isTokenExpired(token)) {
        console.log('‚è∞ Token expirado, fazendo logout autom√°tico...');
        authService.logout();
        return false;
      }
      
      return true;
      
    } catch (error) {
      console.error('‚ùå Erro ao verificar autentica√ß√£o:', error);
      return false;
    }
  },

  // Verificar se token expirou (sua fun√ß√£o mantida)
  isTokenExpired: (token) => {
    try {
      if (!token) return true;
      
      // Decodificar payload do JWT (sua l√≥gica mantida)
      const payload = JSON.parse(atob(token.split('.')[1]));
      const currentTime = Math.floor(Date.now() / 1000);
      
      // Verificar se expirou
      return payload.exp < currentTime;
      
    } catch (error) {
      console.error('‚ùå Erro ao verificar expira√ß√£o do token:', error);
      return true; // Se der erro, considerar expirado
    }
  },

  // Obter usu√°rio atual (sua fun√ß√£o mantida)
  getCurrentUser: () => {
    try {
      const user = localStorage.getItem('user');
      return user ? JSON.parse(user) : null;
    } catch (error) {
      console.error('‚ùå Erro ao obter usu√°rio atual:', error);
      return null;
    }
  },

  // Verificar se √© admin (sua fun√ß√£o mantida)
  isAdmin: () => {
    try {
      const user = authService.getCurrentUser();
      return user && user.tipo === 'admin';
    } catch (error) {
      console.error('‚ùå Erro ao verificar se √© admin:', error);
      return false;
    }
  },

  // Obter token (sua fun√ß√£o mantida)
  getToken: () => {
    try {
      return localStorage.getItem('token');
    } catch (error) {
      console.error('‚ùå Erro ao obter token:', error);
      return null;
    }
  },

  // ============================================
  // üõ†Ô∏è SUAS FUN√á√ïES UTILIT√ÅRIAS MANTIDAS
  // ============================================
  
  // Verificar se usu√°rio tem permiss√£o espec√≠fica
  hasPermission: (requiredType) => {
    try {
      const user = authService.getCurrentUser();
      if (!user) return false;
      
      // Admin tem todas as permiss√µes
      if (user.tipo === 'admin') return true;
      
      // Verificar tipo espec√≠fico
      return user.tipo === requiredType;
      
    } catch (error) {
      console.error('‚ùå Erro ao verificar permiss√£o:', error);
      return false;
    }
  },

  // Obter informa√ß√µes do token (sua fun√ß√£o mantida)
  getTokenInfo: () => {
    try {
      const token = authService.getToken();
      if (!token) return null;
      
      const payload = JSON.parse(atob(token.split('.')[1]));
      const currentTime = Math.floor(Date.now() / 1000);
      
      return {
        userId: payload.id,
        userType: payload.tipo,
        issuedAt: new Date(payload.iat * 1000),
        expiresAt: new Date(payload.exp * 1000),
        timeToExpire: payload.exp - currentTime,
        isExpired: payload.exp < currentTime
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao obter informa√ß√µes do token:', error);
      return null;
    }
  },

  // Renovar sess√£o (sua fun√ß√£o com rotas din√¢micas)
  refreshSession: async () => {
    try {
      console.log('üîÑ Tentando renovar sess√£o...');
      
      if (!authService.isAuthenticated()) {
        throw new Error('Usu√°rio n√£o autenticado');
      }
      
      // Usar fun√ß√£o getPerfil da api.js (com rotas din√¢micas)
      const response = await getPerfil();
      
      // Atualizar dados do usu√°rio (sua l√≥gica mantida)
      if (response.usuario || response.user) {
        const user = response.usuario || response.user;
        localStorage.setItem('user', JSON.stringify(user));
        console.log('‚úÖ Sess√£o renovada com sucesso');
      }
      
      return response;
      
    } catch (error) {
      console.error('‚ùå Erro ao renovar sess√£o:', error);
      authService.logout();
      throw error;
    }
  },

  // Debug da autentica√ß√£o (sua fun√ß√£o mantida)
  debugAuth: () => {
    console.log('\nüîç =================================');
    console.log('üõ†Ô∏è DEBUG DA AUTENTICA√á√ÉO');
    console.log('=================================');
    
    const token = authService.getToken();
    const user = authService.getCurrentUser();
    const tokenInfo = authService.getTokenInfo();
    
    console.log('üîë Tem Token:', !!token);
    console.log('üë§ Tem Usu√°rio:', !!user);
    console.log('‚úÖ Est√° Autenticado:', authService.isAuthenticated());
    console.log('üëë √â Admin:', authService.isAdmin());
    console.log('üåê Plataforma:', window.location.hostname.includes('vercel.app') ? 'VERCEL' : window.location.hostname.includes('onrender.com') ? 'RENDER' : 'LOCAL');
    
    if (user) {
      console.log('üìù Dados do Usu√°rio:', {
        id: user.id,
        nome: user.nome,
        email: user.email,
        tipo: user.tipo
      });
    }
    
    if (tokenInfo) {
      console.log('üé´ Info do Token:', {
        userId: tokenInfo.userId,
        tipo: tokenInfo.userType,
        expira: tokenInfo.expiresAt.toLocaleString(),
        tempoRestante: `${Math.max(0, tokenInfo.timeToExpire)} segundos`,
        expirado: tokenInfo.isExpired
      });
    }
    
    console.log('=================================\n');
    
    return { token: !!token, user, tokenInfo, isAuthenticated: authService.isAuthenticated() };
  }
};

export default authService;