import api from './api';

const orcamentoService = {
  // ============================================
  // üìã LISTAR OR√áAMENTOS (COMPAT√çVEL COM COMPONENTES)
  // ============================================
  listar: async (params = {}) => {
    try {
      console.log('üîç OrcamentoService.listar - Buscando or√ßamentos...');
      
      const response = await api.get('/orcamentos', { params });
      
      // Adaptar resposta para compatibilidade com componentes
      if (response.data && response.data.data) {
        // Backend retorna: { data: [...], success: true }
        console.log('‚úÖ Or√ßamentos encontrados:', response.data.data.length);
        return {
          ...response,
          data: response.data.data // Extrair array para componentes
        };
      } else if (response.data && Array.isArray(response.data)) {
        // Backend retorna: [...] (array direto)
        console.log('‚úÖ Or√ßamentos encontrados:', response.data.length);
        return response;
      }
      
      // Fallback: garantir que sempre retorna array
      console.log('‚úÖ Or√ßamentos encontrados: 0 (fallback)');
      return {
        ...response,
        data: response.data || []
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao listar or√ßamentos:', error.response?.data?.message || error.message);
      throw error;
    }
  },

  // ============================================
  // üìÑ LISTAR COM PAGINA√á√ÉO (PARA COMPONENTES AVAN√áADOS)
  // ============================================
  listarComPaginacao: async (params = {}) => {
    try {
      console.log('üìÑ OrcamentoService.listarComPaginacao - Par√¢metros:', params);
      
      const response = await api.get('/orcamentos/page', { params });
      
      console.log('‚úÖ Pagina√ß√£o - Total:', response.data?.pagination?.total || 0);
      return response;
      
    } catch (error) {
      console.error('‚ùå Erro na pagina√ß√£o:', error.response?.data?.message || error.message);
      throw error;
    }
  },

  // ============================================
  // üîç BUSCAR POR ID (SUA ESTRUTURA MANTIDA)
  // ============================================
  buscarPorId: async (id) => {
    try {
      console.log('üîç OrcamentoService.buscarPorId - ID:', id);
      
      if (!id) {
        throw new Error('ID do or√ßamento √© obrigat√≥rio');
      }
      
      const response = await api.get(`/orcamentos/${id}`);
      
      // Adaptar resposta se necess√°rio
      if (response.data && response.data.data) {
        console.log('‚úÖ Or√ßamento encontrado:', response.data.data.numero || id);
        return {
          ...response,
          data: response.data.data
        };
      }
      
      console.log('‚úÖ Or√ßamento encontrado:', id);
      return response;
      
    } catch (error) {
      console.error('‚ùå Erro ao buscar or√ßamento:', error.response?.data?.message || error.message);
      throw error;
    }
  },

  // ============================================
  // ‚ûï CRIAR OR√áAMENTO (SUA ESTRUTURA + VALIDA√á√ÉO)
  // ============================================
  criar: async (dados) => {
    try {
      console.log('‚ûï OrcamentoService.criar - Dados:', {
        cliente_id: dados?.cliente_id,
        valor_total: dados?.valor_total,
        status: dados?.status
      });
      
      // Valida√ß√£o b√°sica essencial
      if (!dados?.cliente_id) {
        throw new Error('Cliente √© obrigat√≥rio para criar or√ßamento');
      }
      
      const response = await api.post('/orcamentos', dados);
      
      console.log('‚úÖ Or√ßamento criado com sucesso!');
      return response;
      
    } catch (error) {
      console.error('‚ùå Erro ao criar or√ßamento:', error.response?.data?.message || error.message);
      throw error;
    }
  },

  // ============================================
  // üîÑ ATUALIZAR OR√áAMENTO (SUA ESTRUTURA + VALIDA√á√ÉO)
  // ============================================
  atualizar: async (id, dados) => {
    try {
      console.log('üîÑ OrcamentoService.atualizar - ID:', id);
      
      if (!id) {
        throw new Error('ID do or√ßamento √© obrigat√≥rio');
      }
      
      const response = await api.put(`/orcamentos/${id}`, dados);
      
      console.log('‚úÖ Or√ßamento atualizado com sucesso!');
      return response;
      
    } catch (error) {
      console.error('‚ùå Erro ao atualizar or√ßamento:', error.response?.data?.message || error.message);
      throw error;
    }
  },

  // ============================================
  // üóëÔ∏è DELETAR OR√áAMENTO (SUA ESTRUTURA + VALIDA√á√ÉO)
  // ============================================
  deletar: async (id) => {
    try {
      console.log('üóëÔ∏è OrcamentoService.deletar - ID:', id);
      
      if (!id) {
        throw new Error('ID do or√ßamento √© obrigat√≥rio');
      }
      
      const response = await api.delete(`/orcamentos/${id}`);
      
      console.log('‚úÖ Or√ßamento deletado com sucesso!');
      return response;
      
    } catch (error) {
      console.error('‚ùå Erro ao deletar or√ßamento:', error.response?.data?.message || error.message);
      throw error;
    }
  },

  // ============================================
  // üìä M√âTODOS EXTRAS ESSENCIAIS (PARA PAINEL)
  // ============================================
  obterEstatisticas: async () => {
    try {
      console.log('üìä OrcamentoService.obterEstatisticas...');
      
      const response = await api.get('/orcamentos/estatisticas');
      
      console.log('‚úÖ Estat√≠sticas obtidas');
      return response;
      
    } catch (error) {
      console.error('‚ùå Erro nas estat√≠sticas:', error.response?.data?.message || error.message);
      
      // Retornar dados padr√£o se API n√£o estiver dispon√≠vel
      return {
        data: {
          total: 0,
          rascunhos: 0,
          pendentes: 0,
          aprovados: 0,
          rejeitados: 0,
          valor_total: 0
        }
      };
    }
  },

  // ============================================
  // üß™ TESTE DE CONEX√ÉO (ESSENCIAL PARA DEBUG)
  // ============================================
  teste: async () => {
    try {
      console.log('üß™ OrcamentoService.teste - Testando conex√£o...');
      
      const response = await api.get('/orcamentos/teste');
      
      console.log('‚úÖ API de or√ßamentos funcionando!');
      return response;
      
    } catch (error) {
      console.error('‚ùå API de or√ßamentos com problema:', error.response?.data?.message || error.message);
      throw error;
    }
  },

  // ============================================
  // üîÑ ALTERAR STATUS (M√âTODO DE CONVENI√äNCIA)
  // ============================================
  alterarStatus: async (id, novoStatus) => {
    try {
      console.log('üîÑ OrcamentoService.alterarStatus - ID:', id, 'Status:', novoStatus);
      
      const statusValidos = ['rascunho', 'pendente', 'aprovado', 'rejeitado'];
      if (!statusValidos.includes(novoStatus)) {
        throw new Error(`Status inv√°lido. Use: ${statusValidos.join(', ')}`);
      }
      
      const response = await orcamentoService.atualizar(id, { status: novoStatus });
      
      console.log('‚úÖ Status alterado para:', novoStatus.toUpperCase());
      return response;
      
    } catch (error) {
      console.error('‚ùå Erro ao alterar status:', error.message);
      throw error;
    }
  }
};

export default orcamentoService;